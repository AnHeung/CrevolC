앵귤러 js - > 앵귤러2 제거된 기능 controller $scope angular.module jQlite 

controller 메소드 - > 클래스 중심 코딩

$Scope 사용 - > 컴포넌트로 영역 확실히

angular.module 사용 않아도 더 좋은 모듈시스템 제공

jQlite 기능 대체 -> DOM제어 모듈

지시자 43개 제거 - > 더 깔끔

lazy loading (지연 로딩) 사용 -> 첨부터 모든 모듈을 로딩하지 않고 필요한 모듈만 로딩 - > 모바일에 좋다.

aot 컴파일러 html 템플릿과 css를 미리 컴파일해 코드로 삽입하는 방식 

예전 앵귤러 js 는 컴파일 - > 렌더링 - > 컴파일 - > 렌더링

앵귤러2 는 컴파일 - 화면표시 - 화면표시 - 화면표시....

앵귤러는 컴포넌트 중심으로 개발됨 

컴포넌트는 템플릿과 클래스로 구성됨

템플릿 = 컴포넌트 ui  - > ui는 별도의 가상DOM에 저장 (컴포넌트마다 가상 DOM 사용)

클래스 = 컴포넌트의 로직 담당

템플릿과 클래스는 바인딩을 통해 연결되고  바인딩은 템플릿에서 이벤트를 전달하거나 템플릿과 클래스간에 데이터 교환을 함.

변화 감지(change detection) - > 이렇게 바인딩을 통해 하나의 상태값을 가지므로 구성요소 가운데 하나라도 상태 변경이 되면 바인딩된 구성요소가 모두 동일값 가짐


앵귤러 4대 구성요소  - > 컴포넌트 , 모듈 , 서비스 , 지시자 


@component 장식자로 컴포넌트 정의

template 속성에 템플릿 ui 

모듈은 export 키워드로 정의 - > 모듈은 컴포넌트에서 import를 통해 사용함.

컴포넌트는 애플리케이션을 구성하는 중심이고 컴포넌트를 기반으로 모듈을 구성하는과정은 체계적이지도 못하고 복잡하므로 

angular 모듈시스템을 사용하면 편하게 구상할 수 있다. @NgModule 장식자 내부에 설정

서비스는 재사용 가능한 로직을 정의하기 위한 용도로 컴포넌트 외부에 정의 @Injectable 장식자 사용해 선언

angular는 선언형 프로그래밍을 권장하고 지시자를 사용해 선언한다.

es6의 최신 표준을 사용하기 때문에 최신 브라우저만 가능해서 구 버전에도 어느정도 대응하게 만듬 ex) ie 9 

npm install -g typescript 전역에 type스크립트 설치 

만약 ts 로 된파일을 es5 버전 자바스크립트로 컴파일 하려면 tsc app.ts -t ES5 








